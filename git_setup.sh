#!/bin/bash

# GAA-5-testing Git Repository Setup Script
# Created: August 31, 2025
# Purpose: Initialize, configure, and push GAA-5-testing to GitHub

set -e  # Exit on error

echo "üöÄ GAA-5-testing Git Repository Setup"
echo "====================================="

# Configuration (You'll need to provide these)
GITHUB_USERNAME="${GIT_USERNAME:-}"
GITHUB_TOKEN="${GIT_TOKEN:-}"
REPO_NAME="gaa-5-testing"
REPO_DESCRIPTION="GAA-5 Autonomous Agent System - Testing Environment"

# Check if credentials are provided
if [ -z "$GITHUB_USERNAME" ] || [ -z "$GITHUB_TOKEN" ]; then
    echo "‚ùå Error: GitHub credentials not found!"
    echo "Please set GIT_USERNAME and GIT_TOKEN environment variables"
    echo "Example: GIT_USERNAME=your-username GIT_TOKEN=your-token ./git_setup.sh"
    exit 1
fi

echo "üìù Using GitHub account: $GITHUB_USERNAME"

# Initialize Git repository if not already initialized
if [ ! -d .git ]; then
    echo "üìÇ Initializing Git repository..."
    git init
    git branch -M main
else
    echo "‚úÖ Git repository already initialized"
fi

# Configure Git user
echo "‚öôÔ∏è Configuring Git user..."
git config user.name "$GITHUB_USERNAME"
git config user.email "${GITHUB_USERNAME}@users.noreply.github.com"

# Create README if it doesn't exist
if [ ! -f README.md ]; then
    echo "üìÑ Creating README.md..."
    cat > README.md << 'EOF'
# GAA-5 Testing - Autonomous Agent System

## ü§ñ Overview
GAA-5 (Generative Autonomous Agent v5) is a self-improving AI system that operates in continuous loops to plan, review, execute, and reflect on tasks. This is the testing environment where agents learn and evolve.

## üöÄ Features
- **Autonomous Planning**: Agents create their own task plans
- **Safety Review**: Built-in risk assessment before execution
- **Continuous Learning**: Reflection and memory systems for improvement
- **Self-Modification**: SystemAgent can propose and implement improvements
- **Human Collaboration**: Real-time messaging with human operators

## üìÅ Structure
```
gaa-5-testing/
‚îú‚îÄ‚îÄ src/                  # Core agent code
‚îÇ   ‚îú‚îÄ‚îÄ agents/          # Individual agent implementations
‚îÇ   ‚îú‚îÄ‚îÄ server.js        # Express server
‚îÇ   ‚îî‚îÄ‚îÄ prompts.js       # Agent personalities
‚îú‚îÄ‚îÄ site/                # Web dashboard
‚îú‚îÄ‚îÄ data/                # Agent workspace
‚îÇ   ‚îú‚îÄ‚îÄ reports/        # Generated reports
‚îÇ   ‚îú‚îÄ‚îÄ tools/          # Created tools
‚îÇ   ‚îî‚îÄ‚îÄ knowledge/      # Knowledge base
‚îî‚îÄ‚îÄ config/             # Configuration files
```

## üõ†Ô∏è Setup
```bash
# Install dependencies
npm install

# Set up environment variables
cp .env.example .env
# Edit .env with your API keys

# Start the system
npm start
# OR
./start.sh
```

## üìä Dashboard
Access the dashboard at: http://localhost:3456/dashboard.html

## üîí Security Note
This is a PUBLIC repository. Never commit:
- API keys
- Passwords
- Private tokens
- Database files with sensitive data

## üìù Current Status
- **Version**: 5.0-testing
- **Status**: Active Development
- **Last Updated**: $(date +"%B %d, %Y")

## ü§ù Collaboration
The agents are learning to collaborate with Claude Code (ClaudeC) for enhanced capabilities.

## üìú License
MIT License - See LICENSE file for details

---
*Generated by GAA-5 Setup Script*
EOF
fi

# Create .env.example if it doesn't exist
if [ ! -f .env.example ]; then
    echo "üìÑ Creating .env.example..."
    cat > .env.example << 'EOF'
# GAA-5 Testing Environment Variables
# Copy this to .env and fill in your values

# Google Gemini API
GOOGLE_API_KEY=your-gemini-api-key-here

# GitHub Credentials (for public repos only)
GIT_USERNAME=your-github-username
GIT_TOKEN=ghp_your-github-token-here

# Server Configuration
PORT=3456
DB_PATH=./data/gaa.db

# Model Configuration
MODEL_PRO=gemini-2.0-flash-exp
MODEL_FLASH=gemini-1.5-flash-002

# Execution Settings
AUTO_APPROVE_RISK_THRESHOLD=0.4
MAX_APPROVED_STEPS_PER_LOOP=15
SYSTEM_AGENT_INTERVAL=10
API_DELAY_MS=15000
EXECUTION_PATH=./data
EOF
fi

# Add all files
echo "üì¶ Staging files for commit..."
git add -A

# Create initial commit
echo "üíæ Creating initial commit..."
git commit -m "üöÄ Initial commit: GAA-5 Testing Environment

- Autonomous agent system with planning, review, execution, and reflection
- Web dashboard for monitoring and human interaction
- Agent workspace with reports, tools, and knowledge base
- Enhanced collaboration with Claude Code
- Comprehensive .gitignore for security
- Documentation and setup scripts

Co-authored-by: Claude Code <claude@anthropic.com>" || echo "‚úÖ Already up to date"

# Check if remote exists
if git remote get-url origin &>/dev/null; then
    echo "‚úÖ Remote 'origin' already exists"
else
    # Create repository on GitHub using API
    echo "üåê Creating GitHub repository..."
    CREATE_RESPONSE=$(curl -s -X POST \
        -H "Authorization: token $GITHUB_TOKEN" \
        -H "Accept: application/vnd.github.v3+json" \
        https://api.github.com/user/repos \
        -d "{\"name\":\"$REPO_NAME\",\"description\":\"$REPO_DESCRIPTION\",\"public\":true,\"auto_init\":false}")
    
    # Check if repo was created or already exists
    if echo "$CREATE_RESPONSE" | grep -q "\"full_name\""; then
        echo "‚úÖ Repository created successfully"
    elif echo "$CREATE_RESPONSE" | grep -q "name already exists"; then
        echo "‚úÖ Repository already exists"
    else
        echo "‚ö†Ô∏è Could not create repository. Response:"
        echo "$CREATE_RESPONSE"
        echo "You may need to create it manually at: https://github.com/new"
    fi
    
    # Add remote
    echo "üîó Adding remote origin..."
    git remote add origin "https://${GITHUB_USERNAME}:${GITHUB_TOKEN}@github.com/${GITHUB_USERNAME}/${REPO_NAME}.git"
fi

# Push to GitHub
echo "‚¨ÜÔ∏è Pushing to GitHub..."
git push -u origin main || echo "‚ö†Ô∏è Push failed - repository might not exist yet"

echo ""
echo "‚úÖ Git setup complete!"
echo "üìç Repository URL: https://github.com/${GITHUB_USERNAME}/${REPO_NAME}"
echo ""
echo "üìã Next steps:"
echo "1. Verify repository at: https://github.com/${GITHUB_USERNAME}/${REPO_NAME}"
echo "2. Set up automated backups with: ./backup_schedule.sh"
echo "3. Review rollback protocol in: ./ROLLBACK_PROTOCOL.md"